"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const check_1 = require("../middlewares/check");
const posts_1 = require("../models/posts");
const comments_1 = require("../models/comments");
const router = express.Router();
router.get('/', (req, res, next) => {
    const author = req.query.author;
    posts_1.default.getPosts(author).then(posts => {
        res.render('posts', { posts: posts });
    }).catch(next);
});
router.get('/create', check_1.checkLogin, (req, res) => {
    res.render('create');
});
router.post('/create', check_1.checkLogin, (req, res, next) => {
    const author = req.session.user._id;
    const title = req.fields.title;
    const content = req.fields.content;
    try {
        if (!title.length) {
            throw new Error('请填写标题');
        }
        if (!content.length) {
            throw new Error('请填写内容');
        }
    }
    catch (e) {
        req.flash('error', e.message);
        res.redirect('back');
    }
    let post = {
        author,
        title,
        content,
    };
    posts_1.default.create(post).then(result => {
        req.flash('success', '发表成功');
        res.redirect('/posts/' + result.ops[0]);
    }).catch(next);
});
router.get('/:postId', check_1.checkLogin, (req, res, next) => {
    const postId = req.params.postId;
    Promise.all([
        posts_1.default.getPostById(postId),
        comments_1.default.getComments(postId),
        posts_1.default.incPv(postId),
    ]).then(result => {
        const post = result[0];
        const comments = result[1];
        if (!post) {
            throw new Error();
        }
        res.render('post', {
            post: post,
            comments: comments,
        });
    }).catch(next);
});
router.get('/:postId/edit', check_1.checkLogin, (req, res, next) => {
    const postId = req.params.postId;
    const author = req.session.user._id;
    posts_1.default.getRawPostById(postId).then(post => {
        console.log(post);
        if (!post) {
            throw new Error('该文章不存在');
        }
        if (author.toString() !== post.author._id.toString()) {
            throw new Error('权限不足');
        }
        res.render('edit', { post: post });
    }).catch(next);
});
// POST /posts/:postId/edit 更新一篇文章
router.post('/:postId/edit', check_1.checkLogin, (req, res, next) => {
    const postId = req.params.postId;
    const author = req.session.user._id;
    const title = req.fields.title;
    const content = req.fields.content;
    // 校验参数
    try {
        if (!title.length) {
            throw new Error('请填写标题');
        }
        if (!content.length) {
            throw new Error('请填写内容');
        }
    }
    catch (e) {
        req.flash('error', e.message);
        return res.redirect('back');
    }
    posts_1.default.getRawPostById(postId).then(post => {
        if (!post) {
            throw new Error('文章不存在');
        }
        if (post.author._id.toString() !== author.toString()) {
            throw new Error('没有权限');
        }
        posts_1.default.updatePostById(postId, { title: title, content: content }).then(function () {
            req.flash('success', '编辑文章成功');
            // 编辑成功后跳转到上一页
            res.redirect(`/posts/${postId}`);
        }).catch(next);
    });
});
router.get('/:postId/remove', check_1.checkLogin, (req, res, next) => {
    const postId = req.params.postId;
    const author = req.session.user._id;
    posts_1.default.getRawPostById(postId).then(function (post) {
        if (!post) {
            throw new Error('文章不存在');
        }
        if (post.author._id.toString() !== author.toString()) {
            throw new Error('没有权限');
        }
        posts_1.default.delPostById(postId)
            .then(function () {
            req.flash('success', '删除文章成功');
            // 删除成功后跳转到主页
            res.redirect('/posts');
        })
            .catch(next);
    });
});
exports.default = router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
