"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const check_1 = require("../middlewares/check");
const fs = require("fs");
const sha1_1 = require("sha1");
const path = require("path");
const users_1 = require("../models/users");
const router = express.Router();
router.get('/', check_1.checkNotLogin, (req, res) => {
    res.render('signup');
});
router.post('/', check_1.checkNotLogin, (req, res, next) => {
    const name = req.fields.name;
    let password = req.fields.password;
    const repassword = req.fields.repassword;
    const gender = req.fields.gender;
    const bio = req.fields.bio;
    const avatar = req.files.avatar.path.split(path.sep).pop();
    try {
        if (!(name.length >= 1 && name.length <= 10)) {
            throw new Error('名字请限制在 1-10 个字符');
        }
        if (['m', 'f', 'x'].indexOf(gender)) {
            throw new Error('性别只能是 m、f 或 x');
        }
        if (!(bio.length >= 1 && bio.length <= 30)) {
            throw new Error('个人简介请限制在 1-30 个字符');
        }
        if (!req.files.avatar.name) {
            throw new Error('缺少头像');
        }
        if (password.length < 6) {
            throw new Error('密码至少 6 个字符');
        }
        if (password !== repassword) {
            throw new Error('两次输入密码不一致');
        }
    }
    catch (e) {
        // 删除头像
        fs.unlinkSync(req.files.avatar.path);
        req.flash('error', e.message);
        return res.redirect('signup');
    }
    // 明文密码加密
    password = sha1_1.default(password);
    let user = {
        name,
        password,
        gender,
        bio,
        avatar,
    };
    users_1.default.create(user).then(rel => {
        user = rel.ops[0];
        delete user.password;
        req.session.user = user;
        req.flash('success', '注册成功');
        res.redirect('/posts');
    }).catch(e => {
        // 删除头像
        fs.unlinkSync(req.files.avatar.path);
        if (e.message.match('duplicate key')) {
            req.flash('error', '用户名已被占用');
            return res.redirect('/signup');
        }
        next(e);
    });
});
exports.default = router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUNULENBQUE7SUFFRCxlQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM5QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDckIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ1QsT0FBTztRQUNQLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckMsSUFBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBQztZQUNoQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUM5QixPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbEM7UUFFRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwiZmlsZSI6InJvdXRlcy9zaWdudXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgY2hlY2tOb3RMb2dpbiB9IGZyb20gJy4uL21pZGRsZXdhcmVzL2NoZWNrJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCBzaGExIGZyb20gJ3NoYTEnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBVc2VyTW9kZWwgZnJvbSAnLi4vbW9kZWxzL3VzZXJzJztcblxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxucm91dGVyLmdldCgnLycsIGNoZWNrTm90TG9naW4sIChyZXEsIHJlcykgPT4ge1xuICAgIHJlcy5yZW5kZXIoJ3NpZ251cCcpO1xufSk7XG5cbnJvdXRlci5wb3N0KCcvJywgY2hlY2tOb3RMb2dpbiwgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IHJlcS5maWVsZHMubmFtZTtcbiAgICBsZXQgcGFzc3dvcmQ6IHN0cmluZyAgPSByZXEuZmllbGRzLnBhc3N3b3JkIGFzIHN0cmluZztcbiAgICBjb25zdCByZXBhc3N3b3JkID0gcmVxLmZpZWxkcy5yZXBhc3N3b3JkIGFzIHN0cmluZztcbiAgICBjb25zdCBnZW5kZXIgPSByZXEuZmllbGRzLmdlbmRlciBhcyBzdHJpbmc7XG4gICAgY29uc3QgYmlvID0gcmVxLmZpZWxkcy5iaW8gYXMgc3RyaW5nO1xuICAgIGNvbnN0IGF2YXRhciA9IHJlcS5maWxlcy5hdmF0YXIucGF0aC5zcGxpdChwYXRoLnNlcCkucG9wKCk7XG5cbiAgICB0cnl7XG4gICAgICAgIGlmKCEobmFtZS5sZW5ndGggPj0gMSAmJiBuYW1lLmxlbmd0aCA8PSAxMCkpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCflkI3lrZfor7fpmZDliLblnKggMS0xMCDkuKrlrZfnrKYnKTtcbiAgICAgICAgfVxuICAgICAgICBpZihbJ20nLCAnZicsICd4J10uaW5kZXhPZihnZW5kZXIpKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5oCn5Yir5Y+q6IO95pivIG3jgIFmIOaIliB4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoYmlvLmxlbmd0aCA+PSAxICYmIGJpby5sZW5ndGggPD0gMzApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+S4quS6uueugOS7i+ivt+mZkOWItuWcqCAxLTMwIOS4quWtl+espicpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXEuZmlsZXMuYXZhdGFyLm5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign57y65bCR5aS05YOPJylcbiAgICAgICAgICB9XG4gICAgICAgIGlmIChwYXNzd29yZC5sZW5ndGggPCA2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+WvhueggeiHs+WwkSA2IOS4quWtl+espicpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhc3N3b3JkICE9PSByZXBhc3N3b3JkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+S4pOasoei+k+WFpeWvhueggeS4jeS4gOiHtCcpXG4gICAgICAgIH1cbiAgICB9Y2F0Y2goZSl7XG4gICAgICAgIC8vIOWIoOmZpOWktOWDj1xuICAgICAgICBmcy51bmxpbmtTeW5jKHJlcS5maWxlcy5hdmF0YXIucGF0aClcbiAgICAgICAgcmVxLmZsYXNoKCdlcnJvcicsIGUubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiByZXMucmVkaXJlY3QoJ3NpZ251cCcpO1xuICAgIH1cblxuICAgIC8vIOaYjuaWh+WvhueggeWKoOWvhlxuICAgIHBhc3N3b3JkID0gc2hhMShwYXNzd29yZCkgYXMgc3RyaW5nO1xuXG4gICAgbGV0IHVzZXIgPSB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHBhc3N3b3JkLFxuICAgICAgICBnZW5kZXIsXG4gICAgICAgIGJpbyxcbiAgICAgICAgYXZhdGFyLFxuICAgIH1cblxuICAgIFVzZXJNb2RlbC5jcmVhdGUodXNlcikudGhlbihyZWwgPT4ge1xuICAgICAgICB1c2VyID0gcmVsLm9wc1swXTtcbiAgICAgICAgZGVsZXRlIHVzZXIucGFzc3dvcmQ7XG4gICAgICAgIHJlcS5zZXNzaW9uLnVzZXIgPSB1c2VyO1xuICAgICAgICByZXEuZmxhc2goJ3N1Y2Nlc3MnLCAn5rOo5YaM5oiQ5YqfJyk7XG4gICAgICAgIHJlcy5yZWRpcmVjdCgnL3Bvc3RzJyk7XG4gICAgfSkuY2F0Y2goZSA9PiB7XG4gICAgICAgIC8vIOWIoOmZpOWktOWDj1xuICAgICAgICBmcy51bmxpbmtTeW5jKHJlcS5maWxlcy5hdmF0YXIucGF0aCk7XG5cbiAgICAgICAgaWYoZS5tZXNzYWdlLm1hdGNoKCdkdXBsaWNhdGUga2V5Jykpe1xuICAgICAgICAgICAgcmVxLmZsYXNoKCdlcnJvcicsICfnlKjmiLflkI3lt7LooqvljaDnlKgnKTtcbiAgICAgICAgICAgIHJldHVybiByZXMucmVkaXJlY3QoJy9zaWdudXAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoZSk7XG4gICAgfSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl19
