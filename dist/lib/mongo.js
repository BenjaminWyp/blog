"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config = require('config-lite')(__dirname);
const Mongolass = require('mongolass');
const moment = require('moment');
const objectIdToTimestamp = require('objectid-to-timestamp');
const mongolass = new Mongolass();
mongolass.connect(config.mongodb);
mongolass.plugin('convertCreatedAt', {
    afterFind: function (results) {
        results.forEach(item => {
            item.createdAt = moment(objectIdToTimestamp(item._id)).format('YYYY-MM-DD HH:ii:ss');
        });
        return results;
    },
    afterFindOne: function (result) {
        if (result) {
            result.createdAt = moment(objectIdToTimestamp(result._id)).format('YYYY-MM-DD HH:ii:ss');
        }
        return result;
    }
});
exports.User = mongolass.model('User', {
    name: { type: 'string', required: true },
    password: { type: 'string', required: true },
    avatar: { type: 'string', required: true },
    gender: { type: 'string', enum: ['m', 'f', 'x'], default: 'x' },
    bio: { type: 'string', required: true },
});
exports.User.index({ name: 1 }, { unique: true }).exec();
exports.Post = mongolass.model('Post', {
    author: { type: Mongolass.Types.ObjectId, required: true },
    title: { type: 'string', required: true },
    content: { type: 'string', required: true },
    pv: { type: 'number', default: 0 },
});
exports.Post.index({ author: 1, _id: -1 }).exec();
exports.Comment = mongolass.model('Comment', {
    author: { type: Mongolass.Types.ObjectId, required: true },
    content: { type: 'string', required: true },
    postId: { type: Mongolass.Types.ObjectId, required: true },
});
exports.Comment.index({ postId: 1, _id: 1 }).exec();

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QU8sR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtJQUM1QyxNQUFNLEVBQUUsRUFBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQztJQUN4RCxPQUFPLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUM7SUFDekMsTUFBTSxFQUFFLEVBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUM7Q0FDM0QsQ0FBQyxDQUFDO0FBQ0gsZUFBTyxDQUFDLEtBQUssQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMiLCJmaWxlIjoibGliL21vbmdvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29uZmlnID0gcmVxdWlyZSgnY29uZmlnLWxpdGUnKShfX2Rpcm5hbWUpO1xuY29uc3QgTW9uZ29sYXNzID0gcmVxdWlyZSgnbW9uZ29sYXNzJyk7XG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKVxuY29uc3Qgb2JqZWN0SWRUb1RpbWVzdGFtcCA9IHJlcXVpcmUoJ29iamVjdGlkLXRvLXRpbWVzdGFtcCcpO1xuY29uc3QgbW9uZ29sYXNzID0gbmV3IE1vbmdvbGFzcygpO1xuXG5tb25nb2xhc3MuY29ubmVjdChjb25maWcubW9uZ29kYik7XG5tb25nb2xhc3MucGx1Z2luKCdjb252ZXJ0Q3JlYXRlZEF0Jywge1xuICAgIGFmdGVyRmluZDogZnVuY3Rpb24ocmVzdWx0cyl7XG4gICAgICAgIHJlc3VsdHMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGl0ZW0uY3JlYXRlZEF0ID0gbW9tZW50KG9iamVjdElkVG9UaW1lc3RhbXAoaXRlbS5faWQpKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6aWk6c3MnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSxcbiAgICBhZnRlckZpbmRPbmU6IGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAgIGlmKHJlc3VsdCl7XG4gICAgICAgICAgICByZXN1bHQuY3JlYXRlZEF0ID0gbW9tZW50KG9iamVjdElkVG9UaW1lc3RhbXAocmVzdWx0Ll9pZCkpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDppaTpzcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59KTtcblxuZXhwb3J0IGxldCBVc2VyID0gbW9uZ29sYXNzLm1vZGVsKCdVc2VyJywge1xuICAgIG5hbWU6IHt0eXBlOiAnc3RyaW5nJywgcmVxdWlyZWQ6IHRydWV9LFxuICAgIHBhc3N3b3JkOiB7dHlwZTogJ3N0cmluZycsIHJlcXVpcmVkOiB0cnVlfSxcbiAgICBhdmF0YXI6IHt0eXBlOiAnc3RyaW5nJywgcmVxdWlyZWQ6IHRydWV9LFxuICAgIGdlbmRlcjogeyB0eXBlOiAnc3RyaW5nJywgZW51bTogWydtJywgJ2YnLCAneCddLCBkZWZhdWx0OiAneCcgfSxcbiAgICBiaW86IHsgdHlwZTogJ3N0cmluZycsIHJlcXVpcmVkOiB0cnVlIH0sXG59KTtcblVzZXIuaW5kZXgoeyBuYW1lOiAxIH0sIHsgdW5pcXVlOiB0cnVlIH0pLmV4ZWMoKTtcblxuZXhwb3J0IGxldCBQb3N0ID0gbW9uZ29sYXNzLm1vZGVsKCdQb3N0Jywge1xuICAgIGF1dGhvcjoge3R5cGU6IE1vbmdvbGFzcy5UeXBlcy5PYmplY3RJZCwgcmVxdWlyZWQ6IHRydWV9LFxuICAgIHRpdGxlOiB7dHlwZTogJ3N0cmluZycsIHJlcXVpcmVkOiB0cnVlfSxcbiAgICBjb250ZW50OiB7dHlwZTogJ3N0cmluZycsIHJlcXVpcmVkOiB0cnVlfSxcbiAgICBwdjoge3R5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAwfSxcbn0pO1xuUG9zdC5pbmRleCh7YXV0aG9yOiAxLCBfaWQ6IC0xfSkuZXhlYygpO1xuXG5leHBvcnQgbGV0IENvbW1lbnQgPSBtb25nb2xhc3MubW9kZWwoJ0NvbW1lbnQnLCB7XG4gICAgYXV0aG9yOiB7dHlwZTogTW9uZ29sYXNzLlR5cGVzLk9iamVjdElkLCByZXF1aXJlZDogdHJ1ZX0sXG4gICAgY29udGVudDoge3R5cGU6ICdzdHJpbmcnLCByZXF1aXJlZDogdHJ1ZX0sXG4gICAgcG9zdElkOiB7dHlwZTogTW9uZ29sYXNzLlR5cGVzLk9iamVjdElkLCByZXF1aXJlZDogdHJ1ZX0sXG59KTtcbkNvbW1lbnQuaW5kZXgoe3Bvc3RJZDogMSwgX2lkOiAxfSkuZXhlYygpO1xuXG5cblxuXG4iXX0=
